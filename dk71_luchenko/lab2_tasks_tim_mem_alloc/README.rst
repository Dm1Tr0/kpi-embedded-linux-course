=============================================
Лабораторна робота №2
=============================================

Тема
------

**Тасклети,таймери,аллокація пам'яті**

Завдання:
-------
Написати модуль ядра який приймає 2 параметри *cnt* і *delay*:
	* Модуль повинен відпрацьовувати при *cnt* і *delay* рівних нулю
		- *cnt* - кількість циклів, які повинен опрацювати таймер
		- *delay* - затримка між двома спрацюваннями таймера
	* Спочатку *init* друкує поточне значення *jiffies* в лог ядра
	* Далі запускає тасклет, котрий повинен надрукувати своє значення *jiffies* в лог ядра
	* Потім виділяє масив розміру *cnt*, використовуючи динамічну алокацію
	* Потім *init* запускає таймер з затримкою *delay* і функція завершується
		- При спрацюванні таймер кладе поточне значення *jiffies* до масиву і перезапускається з затримкою *delay*
		- Загальна кількість разів, які запускається таймер дорівнює *cnt*
	* В *exit* модуль повинен надрукувати поточне значення *jiffies* і вивести всі значення з масиву

Хід роботи
-------

**Опис виконаної роботи**
В процесі виконання лабораторної роботи було створено модуль ядра за специфікацією, що приймає на вхід cnt та delay. Введені данні перевіряються на коректність.

Функція обробник тасклету `my_tasklet(unsigned long arg)`, виводить значення *jiffies* на момент виклику тасклету.
Функція `jif_to_array` *cnt* разів записує до *array* значення *jiffies* .

Як вже було зауважено раніше в `init` функції данні перевіряються на правильність, також там виводиться *jiffies* при ініціалізації модулю. Крім того в ф-ції виділяється пам'ять для 
нашого масиву за допомогою kzalloc. В разі помилок модуль припиняє свою роботу повертаючи *-1*.

В `exit` ф-ї виводимо поточне значення *jiffies*, та виводимо заповнений массив, при тому враховуючи можливість того, що він не буде заповнений до кінця. Вивільняємо пам'ять.


Результат:

.. code-block:: bash

	/ # insmod /mnt/mymod.ko
	[  104.278978] mymod: loading out-of-tree module taints kernel.
	[  104.280124] Initial Jiffies is 4294771469
	[  104.280710] Wrong cnt
	[  104.281037] Terminated
	[  104.281379] Tasklet jiffies is 4294771470
	insmod: can't in[  104.301198] insmod (93) used greatest stack depth: 13928 bytt
	sert '/mnt/mymod.ko': Operation not permitted

	/ # insmod /mnt/mymod.ko cnt=10 delay=1
	[  483.417091] Initial Jiffies is 4295150606
	[  483.418316] Tasklet jiffies is 4295150607

	    / # rmmod mymod
	[  506.172554] Exit jiffies is 4295173361
	[  506.173666] ArSray[0] = 4295150610
	[  506.174572] ArSray[1] = 4295150613
	[  506.175489] ArSray[2] = 4295150616
	[  506.176428] ArSray[3] = 4295150618
	[  506.177318] ArSray[4] = 4295150620
	[  506.178239] ArSray[5] = 4295150622
	[  506.179272] ArSray[6] = 4295150624
	[  506.180364] ArSray[7] = 4295150626
	[  506.181488] ArSray[8] = 4295150628
	[  506.182454] ArSray[9] = 4295150630


Висновки
-------
В ході роботи було розроблено та протестовано власний модуль ядра. Він відповідає завданню.

	1. *jiffies*, яке друкується в *init* і яке виводить тасклет відрізняється, через те що ці операції відбуваються не одночасно.
	2. При виділенні пам'яті використовувався флаг `GFP_KERNEL` тому що`GFP_KERNEL` в кінцевому результаті викликає `__get_free_pages`. Функція виконує системний виклик від імені процеса. Використання `GFP_KERNEL` означає що `kmalloc` може помістити поточний процес в сон для очікування сторінки пам'яті в разі її відсутності.
	3. При *delay = 0* Таймер буде викликатися з мінімально допустимою затримкою.
