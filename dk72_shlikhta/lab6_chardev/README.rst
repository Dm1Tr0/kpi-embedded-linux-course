=============================================
Лабораторна робота №6
=============================================

Тема
------

**Символьні пристрої**

Завдання:
-------
Напишите свое символьное устройство с ioctl. Оно должно делать что-то полезное. Например, предоставлять шареную память, или генерировать что-то, или рассчитывать. Например, считать количество вхождений определённого символа или сортировать строки или считать интеграл или ...

Хід роботи
-------

**Опис виконаної роботи** 
В ході роботи було написано модуль ядра мовою С.

Більшу частину коду було взято з МКР. 

Модуль генерує пароль довжиною *pass_length* шляхом запису у кожну комірку паролю випадкового символа(обирається із чотирьох типів: цифри, великі літери, малі літери та спеціальні символи). Також наявний параметр *spec_sym_en* який дає дозвіл на використання спеціальних символів(визначено у масиві *SPEC_SYM_ARRAY*) під час генерації паролю.

Major номер для пристрою можна задати двома шляхами автоматично та вручну. Для ручного методу потрібно потрібно задати значення для параметра *major*, якщо залишити значення за замовчуванням, або задати його рівним "0", тоді модуль "попросить" ядро виділити для нього Major номер.

Було створено наступні call_back функції для пристрою:
	- cdev_open (в ній відкривається файл і до поля *private data* заносяться параметри пароля)
	- cdev_release (в ній просто звільняється місце, що займало *private data* і закривається файл)
	- cdev_read (в ній генерується пароль і записується до *__user *buf*)
	- cdev_ioctl (ця функція дозволяє змінити довжину пароля, а також змінити значення прапорця *spec sym en*)

Всі ці функції було також передано до *struct file_operations pass_gen_fops*.

В *init_callback* функції лише перевіряються введені параметри на корректність, реєструється пристрій і виводяться до терміналу значення параметрів, з якими запущено модуль.

В *exit_callback* функції видаляємо пристрій І завершаємо роботу модуля.


Тести:

.. code-block:: bash

	/mnt # insmod cdev.ko
	[   10.228293] cdev: loading out-of-tree module taints kernel.
	[   10.235628] Registered device with 248:0
	[   10.239420] Length of password is 5
	[   10.243176] Spec symbols is disabled
	[   10.247649] insmod (92) used greatest stack depth: 13720 bytes left
	/mnt # rmmod cdev
	/mnt # insmod cdev.ko
	[   27.364210] Registered device with 248:0
	[   27.369282] Length of password is 5
	[   27.372332] Spec symbols is disabled
	/mnt # cd /dev
	/dev # mknod cdev c 248 0
	/dev # cd /
	/ # dd if=/dev/cdev of=/test bs=10 count=1
	[   76.205549] New file entry (____ptrval____) created
	[   76.209648] File close ((____ptrval____))
	0+1 records in
	0+1 records out
	5 bytes (5B) copied, 0.007354 seconds, 679B/s
	/ # cat test
	h3k0s/ # 






Висновки
-------
В ході роботи я познайомився з символьними пристроями. Було зібрано свій модуль ядра, який реалізовує символьний пристрій, який за запитом генерує пароль із заданими параметрами. Із параметрів можна задавати лише довжину паролю та давати дозвіл на використання спеціальних символів у паролі. Ці 2 параметра задаються при завантаженні модуля, але можуть бути змінені за допомогою релізованого *ioctl*.
Заглиблюючись далі у світ kernel linux стає зрозумілішою та прозорішою архітектура UNIX-подібних систем, що на мій погляд - захоплююче, адже використовуючи надане ядром API, можна створити свою кастомну, унікальну систему!(Этот обзац был одолжен, но он хорошо передает то, что хотелось написать в конце лабы)




